{"meta":{"title":"风中的鱼","subtitle":null,"description":"心里有火眼里有光","author":"YU YU","url":""},"pages":[{"title":"bangumi","date":"2019-02-10T13:32:48.000Z","updated":"2020-05-19T07:23:57.767Z","comments":false,"path":"bangumi/index.html","permalink":"/bangumi/index.html","excerpt":"","text":"","keywords":null},{"title":"about","date":"2018-12-12T14:14:36.000Z","updated":"2020-03-16T10:41:30.000Z","comments":false,"path":"about/index.html","permalink":"/about/index.html","excerpt":"","text":"[さくら荘のhojun] 与&nbsp; Mashiro&nbsp; （ 真（ま）白（しろ） ） 对话中... bot_ui_ini()","keywords":"关于"},{"title":"client","date":"2018-12-20T15:13:35.000Z","updated":"2020-03-16T10:41:30.000Z","comments":false,"path":"client/index.html","permalink":"/client/index.html","excerpt":"","text":"直接下载 or 扫码下载：","keywords":"Android客户端"},{"title":"donate","date":"2018-12-20T15:13:05.000Z","updated":"2020-05-19T08:37:48.007Z","comments":false,"path":"donate/index.html","permalink":"/donate/index.html","excerpt":"","text":"","keywords":"谢谢饲主了喵~"},{"title":"lab","date":"2019-01-05T13:47:59.000Z","updated":"2020-03-16T10:41:30.000Z","comments":false,"path":"lab/index.html","permalink":"/lab/index.html","excerpt":"","text":"sakura主题balabala","keywords":"Lab实验室"},{"title":"categories","date":"2020-03-09T05:50:05.000Z","updated":"2020-05-19T15:43:16.267Z","comments":true,"path":"categories/index.html","permalink":"/categories/index.html","excerpt":"","text":""},{"title":"comment","date":"2018-12-20T15:13:48.000Z","updated":"2020-03-16T10:41:30.000Z","comments":true,"path":"comment/index.html","permalink":"/comment/index.html","excerpt":"","text":"念两句诗 叙别梦、扬州一觉。 【宋代】吴文英《夜游宫·人去西楼雁杳》","keywords":"留言板"},{"title":"links","date":"2018-12-19T15:11:06.000Z","updated":"2020-03-16T10:41:30.000Z","comments":true,"path":"links/index.html","permalink":"/links/index.html","excerpt":"","text":"","keywords":"友人帐"},{"title":"tags","date":"2020-05-19T15:14:58.000Z","updated":"2020-05-19T15:14:58.068Z","comments":false,"path":"tags/index-1.html","permalink":"/tags/index-1.html","excerpt":"","text":"","keywords":null},{"title":"tags","date":"2020-03-09T05:50:05.000Z","updated":"2020-05-19T15:18:50.643Z","comments":true,"path":"tags/index.html","permalink":"/tags/index.html","excerpt":"","text":""},{"title":"music","date":"2018-12-20T15:14:28.000Z","updated":"2020-05-18T08:11:28.691Z","comments":false,"path":"music/index.html","permalink":"/music/index.html","excerpt":"","text":"","keywords":"喜欢的音乐"},{"title":"video","date":"2018-12-20T15:14:38.000Z","updated":"2020-03-16T10:41:30.000Z","comments":false,"path":"video/index.html","permalink":"/video/index.html","excerpt":"","text":"var videos = [ { img: 'https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg', title: '朝花夕誓——于离别之朝束起约定之花', status: '已追完', progress: 100, jp: 'さよならの朝に約束の花をかざろう', time: '放送时间: 2018-02-24 SUN.', desc: ' 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。' }, { img : 'https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg', title: '朝花夕誓——于离别之朝束起约定之花', status: '已追完', progress: 100, jp: 'さよならの朝に約束の花をかざろう', time: '2018-02-24 SUN.', desc: ' 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。' } ] .should-ellipsis{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:95%;}.should-ellipsis-full{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:100%;}.should-ellipsis i{position:absolute;right:24px;}.grey-text{color:#9e9e9e !important}.grey-text.text-darken-4{color:#212121 !important}html{line-height:1.15;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}img{border-style:none}progress{display:inline-block;vertical-align:baseline}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}html{-webkit-box-sizing:border-box;box-sizing:border-box}*,*:before,*:after{-webkit-box-sizing:inherit;box-sizing:inherit}ul:not(.browser-default){padding-left:0;list-style-type:none}ul:not(.browser-default)>li{list-style-type:none}.card{-webkit-box-shadow:0 2px 2px 0 rgba(0,0,0,0.14),0 3px 1px -2px rgba(0,0,0,0.12),0 1px 5px 0 rgba(0,0,0,0.2);box-shadow:0 2px 2px 0 rgba(0,0,0,0.14),0 3px 1px -2px rgba(0,0,0,0.12),0 1px 5px 0 rgba(0,0,0,0.2)}.hoverable{-webkit-transition:-webkit-box-shadow .25s;transition:-webkit-box-shadow .25s;transition:box-shadow .25s;transition:box-shadow .25s,-webkit-box-shadow .25s}.hoverable:hover{-webkit-box-shadow:0 8px 17px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19);box-shadow:0 8px 17px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19)}i{line-height:inherit}i.right{float:right;margin-left:15px}.bangumi .right{float:right !important}.material-icons{text-rendering:optimizeLegibility;-webkit-font-feature-settings:'liga';-moz-font-feature-settings:'liga';font-feature-settings:'liga'}.row{margin-left:auto;margin-right:auto;margin-bottom:20px}.row:after{content:\"\";display:table;clear:both}.row .col{float:left;-webkit-box-sizing:border-box;box-sizing:border-box;padding:0 .75rem;min-height:1px}.row .col.s12{width:100%;margin-left:auto;left:auto;right:auto}@media only screen and (min-width:601px){.row .col.m6{width:50%;margin-left:auto;left:auto;right:auto}}html{line-height:1.5;font-family:-apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Oxygen-Sans,Ubuntu,Cantarell,\"Helvetica Neue\",sans-serif;font-weight:normal;color:rgba(0,0,0,0.87)}@media only screen and (min-width:0){html{font-size:14px}}@media only screen and (min-width:992px){html{font-size:14.5px}}@media only screen and (min-width:1200px){html{font-size:15px}}.card{position:relative;margin:.5rem 0 1rem 0;background-color:#fff;-webkit-transition:-webkit-box-shadow .25s;transition:-webkit-box-shadow .25s;transition:box-shadow .25s;transition:box-shadow .25s,-webkit-box-shadow .25s;border-radius:2px}.card .card-title{font-size:24px;font-weight:300}.card .card-title.activator{cursor:pointer}.card .card-image{position:relative}.card .card-image img{display:block;border-radius:2px 2px 0 0;position:relative;left:0;right:0;top:0;bottom:0;width:100%}.card .card-content{padding:24px;border-radius:0 0 2px 2px}.card .card-content p{margin:0}.card .card-content .card-title{display:block;line-height:32px;margin-bottom:8px}.card .card-content .card-title i{line-height:32px}.card .card-reveal{padding:24px;position:absolute;background-color:#fff;width:100%;overflow-y:auto;left:0;top:100%;height:100%;z-index:3;display:none}.card .card-reveal .card-title{cursor:pointer;display:block}.waves-effect{position:relative;cursor:pointer;display:inline-block;overflow:hidden;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-tap-highlight-color:transparent;vertical-align:middle;z-index:1;-webkit-transition:.3s ease-out;transition:.3s ease-out}.waves-effect img{position:relative;z-index:-1}.waves-block{display:block}::-webkit-input-placeholder{color:#d1d1d1}::-moz-placeholder{color:#d1d1d1}:-ms-input-placeholder{color:#d1d1d1}::-ms-input-placeholder{color:#d1d1d1}[type=\"radio\"]:not(:checked){position:absolute;opacity:0;pointer-events:none}[type=\"radio\"]:not(:checked)+span{position:relative;padding-left:35px;cursor:pointer;display:inline-block;height:25px;line-height:25px;font-size:1rem;-webkit-transition:.28s ease;transition:.28s ease;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}[type=\"radio\"]:not(:checked)+span:before,[type=\"radio\"]:not(:checked)+span:after{border-radius:50%}[type=\"radio\"]:not(:checked)+span:before,[type=\"radio\"]:not(:checked)+span:after{border:2px solid #5a5a5a}[type=\"radio\"]:not(:checked)+span:after{-webkit-transform:scale(0);transform:scale(0)}[type=\"checkbox\"]:not(:checked){position:absolute;opacity:0;pointer-events:none}[type=\"checkbox\"]:not(:checked):disabled+span:not(.lever):before{border:none;background-color:rgba(0,0,0,0.42)}[type=\"checkbox\"].filled-in:not(:checked)+span:not(.lever):before{width:0;height:0;border:3px solid transparent;left:6px;top:10px;-webkit-transform:rotateZ(37deg);transform:rotateZ(37deg);-webkit-transform-origin:100% 100%;transform-origin:100% 100%}[type=\"checkbox\"].filled-in:not(:checked)+span:not(.lever):after{height:20px;width:20px;background-color:transparent;border:2px solid #5a5a5a;top:0px;z-index:0}input[type=checkbox]:not(:disabled) ~ .lever:active:before,input[type=checkbox]:not(:disabled).tabbed:focus ~ .lever::before{-webkit-transform:scale(2.4);transform:scale(2.4);background-color:rgba(0,0,0,0.08)}input[type=range].focused:focus:not(.active)::-webkit-slider-thumb{-webkit-box-shadow:0 0 0 10px rgba(38,166,154,0.26);box-shadow:0 0 0 10px rgba(38,166,154,0.26)}input[type=range].focused:focus:not(.active)::-moz-range-thumb{box-shadow:0 0 0 10px rgba(38,166,154,0.26)}input[type=range].focused:focus:not(.active)::-ms-thumb{box-shadow:0 0 0 10px rgba(38,166,154,0.26)} 番组计划 这里将是永远的回忆 window.onload = function(){ videos.forEach(function(video, i){ $('#rootRow').append(` ${video.title} ${video.jp} ${video.status} ${video.title} ${video.jp} 放送时间: ${video.time} ${video.desc} ${video.status} `) }) }","keywords":"B站"},{"title":"theme-sakura","date":"2019-01-04T14:53:25.000Z","updated":"2020-03-16T10:41:30.000Z","comments":false,"path":"theme-sakura/index.html","permalink":"/theme-sakura/index.html","excerpt":"","text":"Hexo主题Sakura修改自WordPress主题Sakura，感谢原作者Mashiro","keywords":"Hexo 主题 Sakura 🌸"},{"title":"rss","date":"2018-12-20T15:09:03.000Z","updated":"2020-03-16T10:41:30.000Z","comments":true,"path":"rss/index.html","permalink":"/rss/index.html","excerpt":"","text":""}],"posts":[{"title":"git基础专题（四）","slug":"git基础专题（四）","date":"2020-05-25T11:30:50.000Z","updated":"2020-05-25T11:38:47.172Z","comments":true,"path":"2020/05/25/git基础专题（四）/","link":"","permalink":"/2020/05/25/git基础专题（四）/","excerpt":"","text":"git常规命令集 一、新建代码库git init # 在当前目录新建一个Git代码库 git init [project-name] # 新建一个目录，将其初始化为Git代码库 git clone [url] # 下载一个项目和它的整个代码历史 二、配置git config --list # 显示当前的Git配置 git config -e [--global] # 编辑Git配置文件 git config [--global] user.name &quot;[name]&quot; # 设置提交代码时的用户信息 git config [--global] user.email &quot;[email address]&quot; # 设置提交代码时的用户邮箱信息 三、增加/删除文件git add [file1] [file2] ... # 添加指定文件到暂存区 git add [dir] # 添加指定目录到暂存区，包括子目录 git add . # 添加当前目录的所有文件到暂存区$ git add -p # 添加每个变化前，都会要求确认,对于同一个文件的多处变化，可以实现分次提交 git rm [file1] [file2] ... # 删除工作区文件，并且将这次删除放入暂存区 git rm --cached [file] # 停止追踪指定文件，但该文件会保留在工作区 git mv [file-original] [file-renamed] # 改名文件，并且将这个改名放入暂存区 四、代码提交git commit -m [message] # 提交暂存区到仓库区 git commit [file1] [file2] ... -m [message] # 提交暂存区的指定文件到仓库区 git commit -a # 提交工作区自上次commit之后的变化，直接到仓库区 git commit -v # 提交时显示所有diff信息 git commit --amend -m [message] # 使用一次新的commit，替代上一次提交,如果代码没有任何新变化，则用来改写上一次commit的提交信息 git commit --amend [file1] [file2] ... # 重做上一次commit，并包括指定文件的新变化 五、分支git branch # 列出所有本地分支 git branch -r # 列出所有远程分支 git branch -a # 列出所有本地分支和远程分支 git branch [branch-name] # 新建一个分支，但依然停留在当前分支 git checkout -b [branch] # 新建一个分支，并切换到该分支 git branch [branch] [commit] # 新建一个分支，指向指定commit git branch --track [branch] [remote-branch] #新建一个分支，与指定的远程分支建立追踪关系 git checkout [branch-name] # 切换到指定分支，并更新工作区 git checkout - # 切换到上一个分支 git branch --set-upstream [branch] [remote-branch] # 建立追踪关系，在现有分支与指定的远程分支之间 git merge [branch] # 合并指定分支到当前分支 git cherry-pick [commit] # 选择一个commit，合并进当前分支 git branch -d [branch-name] # 删除分支 git push origin --delete [branch-name] git branch -dr [remote/branch] # 删除远程分支 六、标签git tag # 列出所有tag git tag [tag] # 新建一个tag在当前commit git tag [tag] [commit] # 新建一个tag在指定commit git tag -d [tag] # 删除本地tag git push origin :refs/tags/[tagName] # 删除远程tag git show [tag] # 查看tag信息 git push [remote] [tag] # 提交指定tag git push [remote] --tags # 提交所有tag git checkout -b [branch] [tag] # 新建一个分支，指向某个tag 七、查看信息git status # 显示有变更的文件 git log # 显示当前分支的版本历史 git log --stat # 显示commit历史，以及每次commit发生变更的文件 git log -S [keyword] # 搜索提交历史，根据关键词 git log [tag] HEAD --pretty=format:%s # 显示某个commit之后的所有变动，每个commit占据一行 git log [tag] HEAD --grep feature # 显示某个commit之后的所有变动，其&quot;提交说明&quot;必须符合搜索条件 git log --follow [file] git whatchanged [file] # 显示某个文件的版本历史，包括文件改名 git log -p [file] # 显示指定文件相关的每一次diff git log -5 --pretty --oneline # 显示过去5次提交 git shortlog -sn # 显示所有提交过的用户，按提交次数排序 git blame [file] # 显示指定文件是什么人在什么时间修改过 git diff # 显示暂存区和工作区的差异 git diff --cached [file] # 显示暂存区和上一个commit的差异 git diff HEAD # 显示工作区与当前分支最新commit之间的差异 git diff [first-branch]...[second-branch] # 显示两次提交之间的差异 git diff --shortstat &quot;@{0 day ago}&quot; # 显示今天你写了多少行代码 git show [commit] # 显示某次提交的元数据和内容变化 git show --name-only [commit] # 显示某次提交发生变化的文件 git show [commit]:[filename] # 显示某次提交时，某个文件的内容 git reflog# 显示当前分支的最近几次提交 八、远程同步git fetch [remote] # 下载远程仓库的所有变动 git remote -v # 显示所有远程仓库 git remote show [remote] # 显示某个远程仓库的信息 git remote add [shortname] [url] # 增加一个新的远程仓库，并命名 git pull [remote] [branch] # 取回远程仓库的变化，并与本地分支合并 git push [remote] [branch] # 上传本地指定分支到远程仓库 git push [remote] --force # 强行推送当前分支到远程仓库，即使有冲突 git push [remote] --all # 推送所有分支到远程仓库 九、撤销git checkout [file] # 恢复暂存区的指定文件到工作区 git checkout [commit] [file] # 恢复某个commit的指定文件到暂存区和工作区 git checkout . # 恢复暂存区的所有文件到工作区 git reset [file] # 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变 git reset --hard # 重置暂存区与工作区，与上一次commit保持一致 git reset [commit] # 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变 git reset --hard [commit] # 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致 git reset --keep [commit] # 重置当前HEAD为指定commit，但保持暂存区和工作区不变 git revert [commit] # 新建一个commit，用来撤销指定commit,后者的所有变化都将被前者抵消，并且应用到当前分支 git stash git stash pop # 暂时将未提交的变化移除，稍后再移入 参考资料https://www.zhihu.com/question/38008771/answer/517332296","categories":[{"name":"笔记","slug":"笔记","permalink":"/categories/笔记/"}],"tags":[{"name":"git","slug":"git","permalink":"/tags/git/"}],"keywords":[{"name":"笔记","slug":"笔记","permalink":"/categories/笔记/"}]},{"title":"git基础专题（三）","slug":"git基础专题（三）","date":"2020-05-23T08:30:03.000Z","updated":"2020-05-25T11:27:27.290Z","comments":true,"path":"2020/05/23/git基础专题（三）/","link":"","permalink":"/2020/05/23/git基础专题（三）/","excerpt":"","text":"创建与合并分支Git把每次的提交串成一条时间线，这条时间线就是一个分支。截止到目前，只有一条时间线，在Git里，这个分支叫主分支，即master分支。HEAD严格来说不是指向提交，而是指向master，master才是指向提交的，所以，HEAD指向的就是当前分支。首先，我们来创建dev分支，然后切换到dev分支上。如下操作： git checkout -b dev #创建并切换分支 git branch #查看当前的分支 git checkout 命令加上 –b参数表示创建并切换，相当于如下2条命令 git branch dev git checkout dev git branch查看分支，会列出所有的分支，当前分支前面会添加一个星号。 我们在dev分支上继续做demo，比如我们现在在test.txt再增加一行3333，以下为dev分支未添加内容之前和添加内容之后 现在dev分支工作已完成，现在我们切换到主分支master上，继续查看test.txt内容如下 因为不是分支demo，所以3333不显示 我们把dev分支上的内容合并到分支master上，可以在master分支上，使用如下命令git merge dev : git merge命令用于合并指定分支到当前分支上，合并后，再查看test.txt内容，可以看到，和dev分支最新提交的是完全一样的。注意到上面的Fast-forward信息，Git告诉我们，这次合并是“快进模式”，也就是直接把master指向dev的当前提交，所以合并速度非常快。合并完成后，我们可以接着删除dev分支了:git branch -d dev 总结创建与合并分支命令： git branch #查看分支 git branch name #创建分支 git checkout name #切换分支 git checkout –b name #创建+切换分支 git merge name(name为某分支) #合并某分支到当前分支 git branch –d name #删除分支 如何解决冲突下面我们还是一步一步来，先新建一个新分支，比如名字叫fenzhi1，在test.txt添加一行内容4444，然后提交 同样，我们现在切换到master分支上来，也在最后一行添加内容，内容为5555。如下左图： 现在我们需要在master分支上来合并fenzhi1， Git用&lt;&lt;&lt;&lt;&lt;&lt;&lt;，=======，&gt;&gt;&gt;&gt;&gt;&gt;&gt;标记出不同分支的内容，其中&lt;&lt;&lt;HEAD是指主分支修改的内容，&gt;&gt;&gt;&gt;&gt;fenzhi1 是指fenzhi1上修改的内容，我们可以修改成和主干代码上一样（fenzhi1删除4444，改5555和master保持一致）再保存。可参考git处理冲突合并 分支管理策略分支策略：首先master主分支应该是非常稳定的，也就是用来发布新版本，一般情况下不允许在上面干活，干活一般情况下在新建的dev分支上干活，干完后，比如上要发布，或者说dev分支代码稳定后可以合并到主分支master上来。 通常合并分支时，git一般使用”Fast forward”模式，在这种模式下，删除分支后，会丢掉分支信息，现在我们来使用带参数 –no-ff来禁用”Fast forward”模式。如git merge –no-ff -m “注释” dev。将dev分支删除后，用git log还能查看被删除的分支信息。 bug分支在开发中，会经常碰到bug问题，有了bug就需要修复，在Git中，每个bug都可以通过一个临时分支来修复，修复完成后，合并分支，然后将临时的分支删除掉。比如在开发中接到一个404 bug时候，我们可以创建一个404分支来修复它，但是，当前的dev分支上的工作还没有提交。并不是不想提交，而是工作进行到一半时候，我们还无法提交，比如我这个分支bug要2天完成，但是我issue-404 bug需要5个小时内完成。怎么办呢？还好，Git还提供了一个stash功能，可以把当前工作现场 ”隐藏起来”，等以后恢复现场后继续工作。git stash git checkout dev git stash #将当前的工作现场隐藏起来 git status #查看状态是干净的 现在可以通过创建issue-404分支来修复bug了。首先我们要确定在那个分支上修复bug，比如我现在是在主分支master上来修复的，现在我要在master分支上创建一个临时分支，修复完成后，切换到master分支上，并完成合并，最后删除issue-404分支。演示如下： git checkout -b issue-404 #创建临时分支 *****修改test文件bug******** git add test.txt git commit -m &#39;fix bug 404&#39; git checkout master #切换到master分支 git merge --no-ff -m &quot;merge bug 404&quot; issue-404 #合并分支issue-404内容 ****合并分支后查看内容，和issue-404内容一致**** git branch -d issue-404 #在master分支上删除临时分支 现在回到dev分支上干活 git checkout dev #从master分支切换到dev分支 git status 工作区是干净的，那么我们工作现场去哪里呢？我们可以使用命令git stash list来查看下。工作现场还在，Git把stash内容存在某个地方了，但是需要恢复一下，可以使用如下2个方法：1.git stash apply恢复，恢复后，stash内容并不删除，你需要使用命令git stash drop来删除。2.另一种方式是直接使用git stash pop,恢复的同时把stash内容也删除了。 多人协作当你从远程库克隆时候，实际上Git自动把本地的master分支和远程的master分支对应起来了，并且远程库的默认名称是origin。要查看远程库的信息 使用 git remote要查看远程库的详细信息 使用 git remote –v 一：推送分支推送分支就是把该分支上所有本地提交到远程库中，推送时，要指定本地分支，这样，Git就会把该分支推送到远程库对应的远程分支上,使用命令 git push origin master。要推送到其他分支，比如dev分支上，我们还是那个命令 git push origin dev那么一般情况下，那些分支要推送呢？master分支是主分支，因此要时刻与远程同步。一些修复bug分支不需要推送到远程去，可以先合并到主分支上，然后把主分支master推送到远程去。 二：抓取分支：多人协作时，大家都会往master分支上推送各自的修改。现在我们可以模拟另外一个同事，可以在另一台电脑上（注意要把SSH key添加到github上）或者同一台电脑上另外一个目录克隆，新建一个目录名字叫demo2，接着进入testgit2目录，进行克隆远程的库到本地来git clone git@github.com:sunshine98yy/testgit.git（如下左图），现在目录下生成（如下右图） 现在我们的小伙伴要在dev分支上做开发，就必须把远程的origin的dev分支到本地来，于是可以使用命令创建本地dev分支： git checkout –b dev origin/dev #创建远程origin的dev分支到本地来 ****对分支内容进行修改，添加提交***** git push origin dev #把现在的dev分支推到远程去 小伙伴们已经向origin/dev分支上推送了提交，而我在我的目录文件下也对同样的文件同个地方作了修改，也试图推送到远程库时。 由上面可知：推送失败，因为我的小伙伴最新提交的和我试图推送的有冲突，解决的办法也很简单，上面已经提示我们，先用git pull把最新的提交从origin/dev抓下来，然后在本地合并，解决冲突，再推送。 git pull也失败了，是因为本地分支和远程分支没有建立联系 (使用git branch -vv 可以查看本地分支和远程分支的关联关系)。根据命令行提示只需要执行以下命令即可,设置dev和origin/dev的链接:分支的upstream git branch --set-upstream-to=origin/远程分支的名字(我的是dev) 本地分支的名字(我的是dev) 这回git pull成功，但是合并有冲突，需要手动解决，解决的方法和分支管理中的 解决冲突完全一样。解决后，提交，再push 现在手动已经解决完了，我接在需要再提交，再push到远程库里面去。 git push origin dev #继续推送到远程仓库中 因此：多人协作工作模式一般是这样的：首先，可以试图用git push origin branch-name推送自己的修改.如果推送失败，则因为远程分支比你的本地更新早，需要先用git pull试图合并。如果合并有冲突，则需要解决冲突，并在本地提交。再用git push origin branch-name推送。","categories":[{"name":"笔记","slug":"笔记","permalink":"/categories/笔记/"}],"tags":[{"name":"git","slug":"git","permalink":"/tags/git/"}],"keywords":[{"name":"笔记","slug":"笔记","permalink":"/categories/笔记/"}]},{"title":" git基础专题（二）","slug":"git基础专题（二）","date":"2020-05-22T13:56:49.000Z","updated":"2020-05-24T13:57:53.551Z","comments":true,"path":"2020/05/22/git基础专题（二）/","link":"","permalink":"/2020/05/22/git基础专题（二）/","excerpt":"","text":"git操作创建版本库版本库又名仓库，英文名repository,你可以简单的理解一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改，删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻还可以将文件”还原”。 下面演示创建本地版本库，提交文件到本地版本库 创建一个版本库非常简单，如下我在【D盘】 下新建一个demo1版本库。进入D盘，创建demo1文件夹，文件夹为空。 1.通过命令 git init 把这个目录变成git可以管理的仓库这时候你当前demo1目录下会多了一个.git的目录（.表示此文件隐藏），这个目录是Git来跟踪管理版本的，没事千万不要手动乱改这个目录里面的文件，否则，会把git仓库给破坏了。 2.把文件添加到版本库中。在版本库中新建test.txt文件，文件内容git repo1。 echo &quot;git repo1&quot; &gt;&gt; test.txt 首先要明确下，所有的版本控制系统，只能跟踪文本文件的改动，比如txt文件，网页，所有程序的代码等，Git也不列外，版本控制系统可以告诉你每次的改动，但是图片，视频这些二进制文件，虽能也能由版本控制系统管理，但没法跟踪文件的变化，只能把二进制文件每次改动串起来，也就是知道图片从1kb变成2kb，但是到底改了啥，版本控制也不知道。 ​ 第一步：使用命令 git add readme.txt添加到暂存区里面去。git add test.txt ​ 第二步：用命令 git commit告诉Git，把文件提交到仓库。git commit -m &quot;repo1 first commit&quot; 现在我们已经提交了一个test.txt文件，我们下面可以通过命令git status来查看是否还有文件未提交。显示working tree clean ,说明没有任何文件未提交。 现在继续来改下test.txt内容，比如我在下面添加一行change内容，继续使用git status来查看下结果，如下： 上面的命令告诉我们 test.txt文件已被修改，但是未被提交的修改。接下来我想看下test.txt文件到底改了什么内容，如何查看呢？可以使用如下命令：git diff test.txt如下： 如上可以看到，test.txt文件内容从一行git repo改成 二行 添加了一行change内容。知道了对test.txt文件做了什么修改后，我们可以放心的提交到仓库了，提交修改和提交文件是一样的2步(第一步是git add 第二步是：git commit)。 版本回退如上，我们已经学会了修改文件，现在我继续对test.txt文件进行修改，再增加一行内容为second change，并提交到本地仓库。 现在我已经对test.txt文件做了三次修改了，那么我现在想查看下历史记录，如何查呢？我们现在可以使用命令git log ，演示如下所示。我们也可以使用命令 git log --pretty=oneline来精简显示信息 现在我想使用版本回退操作，我想把当前的版本回退到上一个版本，要使用什么命令呢？可以使用如下2种命令，第一种是：git reset --hard HEAD^ 那么如果要回退到上上个版本只需把HEAD^ 改成HEAD^^ 以此类推。那如果要回退到前100个版本的话，使用上面的方法肯定不方便，我们可以使用下面的简便命令操作：git reset --hard HEAD~100 即可。 文本中的内容会回退到对应版本的内容。此时git log显示的最新的版本是回退的版本。后面新的版本不会显示。如下图，最新的second add 不会显示 此时我又想回退到最新的版本second add。内容要如何恢复呢？我们可以通过版本号回退，使用命令方法如下：git reset –hard 版本号 ，但是现在的问题假如我已经关掉过一次命令行或者second add内容的版本号我并不知道呢？要如何知道增加second add内容的版本号呢？可以通过如下命令即可获取到版本号：git reflog演示如下： 通过上面的显示我们可以知道，增加内容second add的版本号是 b65c2d7。我们现在可以命令git reset --hard b65c2d7来恢复了。 工作区与暂存区的区别工作区：就是你在电脑上看到的目录，比如目录下demo1里的文件(.git隐藏目录版本库除外)。或者以后需要再新建的目录文件等等都属于工作区范畴。版本库(Repository)：工作区有一个隐藏目录.git,这个不属于工作区，这是版本库。其中版本库里面存了很多东西，其中最重要的就是stage(暂存区)，还有Git为我们自动创建了第一个分支master,以及指向master的一个指针HEAD。我们前面说过使用Git提交文件到版本库有两步：第一步：是使用 git add 把文件添加进去，实际上就是把文件添加到暂存区。第二步：使用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支上。 Git撤销修改和删除文件操作一：撤销修改工作区做了改动并添加到暂存区，未提交。此时需要恢复到改动前的版本: 第一：如果我知道要删掉哪那些内容的话，直接手动更改去掉那些需要的文件，然后add添加到暂存区，最后commit掉。第二：我可以按以前的方法直接恢复到上一个版本。使用 git reset –hard HEAD^ 只是工作区做了改动，此时需要恢复到改动前的版本： git checkout -- file 可以丢弃工作区的修改，如下命令：git checkout -- test.txt, 把test.txt文件在工作区做的修改全部撤销，这里有2种情况，如下：1.test.txt自动修改后，还没有放到暂存区，使用 撤销修改就回到和版本库一模一样的状态。2.另外一种是test.txt已经放入暂存区了，接着又作了修改，撤销修改就回到添加暂存区后的状态。对于第二种情况，我想我们继续做demo来看下，假如现在我对test.txt添加一行 内容为1111，我git add 增加到暂存区后，接着添加内容2222，我想通过撤销命令让其回到暂存区后的状态。如下所示： 注意：命令git checkout – test.txt 中的 – 很重要，如果没有 – 的话，那么命令变成创建分支了。 二：删除文件。在版本库demo1目录添加一个文件b.txt,提交,然后删除 git add b.txt git commit -m &#39;添加b.txt文件&#39; rm b.txt #可以直接在目录下删除b.txt文件或者使用命令rm b.txt 执行完上述步骤后，此时有两个选择: 1.我想彻底从版本库中删掉此文件，可以再执行commit命令 提交掉 2.如果我想在版本库中恢复此文件，使用命令git checkout -- b.txt 远程仓库目前使用的git命令都是在本地执行，如果想通过git分享我们的代码，或者想与其他开发人员合作，就需要将数据放到一台其他人员能连接的服务器上。 在了解之前，先注册github账号，由于你的本地Git仓库和github仓库之间的传输是通过SSH加密的，所以需要先设置SSH,步骤见《git基础专题（二）》。 如何添加远程仓库我们已经在本地创建了一个Git仓库后，又想在github创建一个Git仓库，并且希望这两个仓库进行远程同步，这样github的仓库可以作为备份，又可以让其他人通过该仓库来协作。 新建一个名为testgit的仓库，效果如下 GitHub告诉我们，可以从这个仓库克隆出新的仓库，也可以把一个已有的本地仓库与之关联，然后，把本地仓库的内容推送到GitHub仓库。 运行如下命令 git remote add origin https://github.com/sunshine98yy/testgit.git #本地仓库与远程仓库关联命令 git push -u origin master #推到远程仓库上命令 执行git remote就是先将本地仓库与远程仓库建立一个连接，origin是你为远端仓库所起的名字，一般都叫orign,后接远端仓库真实地址。我们第一次推送master分支时，加上了 –u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。 注意master是你要上传的分支的名字，如果当前所在的分支不叫master，会提示错误git show-ref显示远端的相关分支 从现在起，只要本地作了提交，就可以通过如下命令：git push origin master把本地master分支的最新修改推送到github上了，现在你就拥有了真正的分布式版本库了。 如何克隆远程仓库实际开发中需要多人合作，所以需要将远程仓库的代码克隆到本地，然后在本地进行开发，开发完成后需要推送到远程仓库中，方便协作。（远程代码拷贝一份到本地，基于本地的代码进行开发） git clone git@github.com:sunshine98yy/clone_demo.git #（远程代码拷贝到本地）–&gt;提交改动到本地仓库–&gt;本地仓库push到远程仓库克隆仓库默认跟远程仓库分支绑定！！直接命令git push到远程仓库","categories":[{"name":"笔记","slug":"笔记","permalink":"/categories/笔记/"}],"tags":[{"name":"git","slug":"git","permalink":"/tags/git/"}],"keywords":[{"name":"笔记","slug":"笔记","permalink":"/categories/笔记/"}]},{"title":"SOURCETREE 3.1.3 版本跳过BITBUCKET注册方法（亲测好用）","slug":"SOURCETREE-3-1-3-版本跳过BITBUCKET注册方法（亲测好用）","date":"2020-05-21T14:25:21.000Z","updated":"2020-05-21T14:34:00.962Z","comments":true,"path":"2020/05/21/SOURCETREE-3-1-3-版本跳过BITBUCKET注册方法（亲测好用）/","link":"","permalink":"/2020/05/21/SOURCETREE-3-1-3-版本跳过BITBUCKET注册方法（亲测好用）/","excerpt":"","text":"1.首先下载并安装好git程序。 2.接着下载并执行SourceTreeSetup-3.1.3.exe，会进入登录或注册bitbucket的界面，我只是想用软件，并不想去注册账号。怎么办？请往下看。 3.打开 %LocalAppData%\\Atlassian目录，接着进入SourceTree目录，创建accounts.json文件，并修改accounts.json内容如下： [ { &quot;$id&quot;: &quot;1&quot;, &quot;$type&quot;: &quot;SourceTree.Api.Host.Identity.Model.IdentityAccount, SourceTree.Api.Host.Identity&quot;, &quot;Authenticate&quot;: true, &quot;HostInstance&quot;: { &quot;$id&quot;: &quot;2&quot;, &quot;$type&quot;: &quot;SourceTree.Host.Atlassianaccount.AtlassianAccountInstance, SourceTree.Host.AtlassianAccount&quot;, &quot;Host&quot;: { &quot;$id&quot;: &quot;3&quot;, &quot;$type&quot;: &quot;SourceTree.Host.Atlassianaccount.AtlassianAccountHost, SourceTree.Host.AtlassianAccount&quot;, &quot;Id&quot;: &quot;atlassian account&quot; }, &quot;BaseUrl&quot;: &quot;https://id.atlassian.com/&quot; }, &quot;Credentials&quot;: { &quot;$id&quot;: &quot;4&quot;, &quot;$type&quot;: &quot;SourceTree.Model.BasicAuthCredentials, SourceTree.Api.Account&quot;, &quot;Username&quot;: &quot;&quot;, &quot;Email&quot;: null }, &quot;IsDefault&quot;: false } ] 4.打开 %LocalAppData%\\Atlassian，进入“SourceTree.exe_Url_iayhtc13zv3obzuz5vchezjs1az2q5ef”（注该目录可能和版本相关，不同版本的路径可能不完全一样。） 接着进入”3.1.3.3158“目录，打开user.config文件，在里面加入六行代码。 &lt;setting name=&quot;AgreedToEULA&quot; serializeAs=&quot;String&quot;&gt; &lt;value&gt;True&lt;/value&gt; &lt;/setting&gt; &lt;setting name=&quot;AgreedToEULAVersion&quot; serializeAs=&quot;String&quot;&gt; &lt;value&gt;20160201&lt;/value&gt; &lt;/setting&gt; 5.再次执行SourceTreeSetup-3.1.3.exe，即可跳过注册，完成安装。","categories":[{"name":"转载","slug":"转载","permalink":"/categories/转载/"}],"tags":[{"name":"git","slug":"git","permalink":"/tags/git/"}],"keywords":[{"name":"转载","slug":"转载","permalink":"/categories/转载/"}]},{"title":"git基础专题（一）","slug":"git基础专题（一）","date":"2020-05-21T11:44:51.000Z","updated":"2020-05-22T03:14:27.697Z","comments":true,"path":"2020/05/21/git基础专题（一）/","link":"","permalink":"/2020/05/21/git基础专题（一）/","excerpt":"","text":"Git简介Git是一个开源的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。 Git 是Linus Torvalds为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。 尽管最初 Git 的开发是为了辅助 Linux 内核开发的过程，但是现在很多其他自由软件项目中也使用了 Git。 Workspace：工作区Index / Stage：暂存区Repository：仓库区（或本地仓库）Remote：远程仓库 SVN与Git的最主要的区别SVN是集中式版本控制系统，版本库是集中放在中央服务器的，而干活的时候，用的都是自己的电脑，所以首先要从中央服务器哪里得到最新的版本，然后干活，干完后，需要把自己做完的活推送到中央服务器。集中式版本控制系统是必须联网才能工作，如果在局域网还可以，带宽够大，速度够快，如果在互联网下，如果网速慢的话，就纳闷了。Git是分布式版本控制系统，那么它就没有中央服务器的，每个人的电脑就是一个完整的版本库，这样，工作的时候就不需要联网了，因为版本都是在自己的电脑上。既然每个人的电脑都有一个完整的版本库，那多个人如何协作呢？比如说自己在电脑上改了文件A，其他人也在电脑上改了文件A，这时，你们两之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。 Windows 平台上安装下载打开Git 官网 ，点击自己需要的版本，按照提示根据自己电脑系统版本下载相应Git,Mysysgit t是 windows版的Git。 安装打开下载好的Git安装包后，一直点击Next，保持默认选项，直到出现Install，点击Install，安装完成后点击Finish 使用安装好后，在电脑桌面或者打开某一本地磁盘，在空白位置右击鼠标会发现多了两个选项Git GUI Here和Git Bash Here，如图所示，点击Git Bash Here即可从当前位置打开并使用使用Git。 自己遇到的问题：git bash/gui here找不到应用程序 由于移动过git的安装目录，因此选择git bash here 时windows无法访问指定设备路径或文件报错解决办法：https://blog.csdn.net/weixin_39643135/article/details/79440222 配置Git环境1.打开GitHub官网，注册一个账号，注册好后，双击桌面上的Git Bash快捷图标，进行环境配置。 2.配置用户名git config --global user.name &quot;username&quot; ##username是自己的账户名，global表示所有仓库都会使用这种配置，可针对某个仓库进行配置 3.配置邮箱git config --global user.email &quot;username@email.com&quot; ##username@email.com注册账号时用的邮箱 因为Git是分布式版本控制系统，所以需要填写用户名和邮箱作为一个标识。注意：git config –global 参数，有了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然你也可以对某个仓库指定的不同的用户名和邮箱。 4.命令查看之前的配置是否成功 键入git config --global --list 5.生成ssh秘钥 键入ssh-keygen -t rsa生成ssh，连敲三次回车键，结束后去系统盘目录下（一般在 C:\\用户\\当前用户\\ .ssh）查看是否生成 .ssh 文件夹，此文件夹中包含以下两个文件：id_rsa、id_rsa.pub ssh-keygen -t rsa -C &quot;你的邮箱&quot; #邮箱是github的注册邮箱 Generating public/private rsa key pair. Enter file in which to save the key (/Users/your_user_directory/.ssh/id_rsa):&lt;回车就好&gt; 6.在 GitHub 账户中添加你的公钥 运行下面命令，将公钥的内容复制到剪切板clip &lt; ~/.ssh/id_rsa.pub 打开【github】—【settings】—【SSH and GPG keys】—【new ssh key】—【把内容粘到key区域】—【add SSH key】 7.测试配置是否成功 在Git Bash命令框中键入ssh -T git@github.com命令，回车后若出现下面情况，则说明环境配置成功。(连网状态下) $ ssh -T git@github.com Hi sunshine98yy! You&#39;ve successfully authenticated, but GitHub does not provide shell access. git的图形化界面操作软件选择sourcetree作为git的图形化操作软件，可以根据自己的需要选择不同的图形化操作软件。 安装过程很简单。本人安装完后碰到需要注册的问题，由于是外国网站，访问可能会有问题，提供下面绕过注册的方法。 SOURCETREE 3.1.3 版本跳过BITBUCKET注册方法（亲测好用）) 参考文献https://zazdream.com/2020/02/17/Git%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/ https://www.runoob.com/git/git-install-setup.html 自学Git，有哪些书籍或者好的学习资源？","categories":[{"name":"笔记","slug":"笔记","permalink":"/categories/笔记/"}],"tags":[{"name":"git","slug":"git","permalink":"/tags/git/"}],"keywords":[{"name":"笔记","slug":"笔记","permalink":"/categories/笔记/"}]},{"title":"Hexo搭建个人网站(步骤篇)","slug":"Hexo搭建个人博客网站（步骤篇）","date":"2020-05-21T11:20:00.000Z","updated":"2020-05-21T13:58:07.576Z","comments":true,"path":"2020/05/21/Hexo搭建个人博客网站（步骤篇）/","link":"","permalink":"/2020/05/21/Hexo搭建个人博客网站（步骤篇）/","excerpt":"","text":"环境部署安装gitNode.js官网 点击自己需要的版本，一路next默认安装即可。教程可参见之前的博客 安装Node.jsGit 官网 点击自己需要的版本默认安装即可。教程可参见博客,写的很详细了nodejs安装与环境变量配置 安装HexoHexo就是我们的个人博客网站的框架， 这里需要自己在某个磁盘里创建一个文件夹，Hexo框架和以后你自己发布的网页都在这个文件夹中，我在D盘创建一个YY_Blog的文件夹。 1.使用npm下载hexo：在命令行上（任意目录）使用npm install -g hexo 全局安装hexo； 2.安装完成后，在你喜爱的文件夹下（如D:\\YY_Blog），执行以下指令hexo init(在D:\\YY_Blog内点击鼠标右键，选择Git bash)，Hexo 即会自动在目标文件夹建立网站所需要的所有文件；（过程有点慢，耐心等待） 3.安装依赖包：npm install至此，hexo博客环境已经搭建完成，执行以下命令(在H:\\hexo)，然后到浏览器输入localhost:4000即可查看效果： $ hexo g #等价于hexo generate 生成静态网页 $ hexo s #等价于hexo server 启动预览服务器，开启-d选项时可以预览草稿 将hexo部署到github上上文已经在本地部署好了hexo博客系统，但仅仅本地能够访问。如果想让别人访问到你的博客，你可以租一台云主机，然后把hexo系统部署到云主机上，好处是带宽、容量可以得到保证，缺点是需要花费一笔租金。还有另一种免费的方法，就是把hexo部署到githu pages或者gitcafe pages上，本文以github为例。 关于git的安装配置以及github添加公钥的流程可以参见我的博客 [[git的安装配置]]: d 1.创建repository【your repositories】—【new】 如下图所示，这里要注意，repository名称一定是github的用户名+.github.io,否则github pages无法访问。 2.在github中添加公钥打开git bash输入以下命令 $ git config --global user.name &quot;你的用户名&quot; $ git config --global user.email &quot;你的邮箱&quot; 每次使用git命令从github上同步代码时，需要SSH连接认证。这时就需要你在本地先生成SSH KEY(命令如下)，然后把其拷贝到github上。点击Git Bash Here 输入以下命令： $ ssh-keygen -t rsa -C &quot;你的邮箱&quot; #邮箱是github的注册邮箱 Generating public/private rsa key pair. Enter file in which to save the key (/Users/your_user_directory/.ssh/id_rsa):&lt;回车就好&gt; 运行下面命令，将公钥的内容复制到剪切板 clip &lt; ~/.ssh/id_rsa.pub 打开github—&gt;settings—&gt;SSH and GPG keys—&gt;new ssh key—&gt;把内容粘到key区域—&gt;add SSH key 如下图 3.部署hexo1.编辑_config.yml(在D:\\YY_Blog下)，repository是在github中申请的地址。如下： 注意：所有的冒号后面空一格 deploy: type: git repository: https://github.com/sunshine98yy/sunshine98yy.github.io.git branch: master 2.执行下面命令 生成、部署hexo博客到github上,这样，你就可以在sunshine98yy.github.io来访问你的博客了。(后面会有专门一栏讲如何绑定自己专属域名) hexo g hexo d 注意 在执行hexo d命令时，有可能会显示如下错误信息：ERROR Deployer not found : github 解决方法如下： 在hexo的配置文件中，把deploy的type改成git 运行如下命令：npm install hexo-deployer-git --save 文献参考https://blog.csdn.net/ParanoidYang/article/details/71436028 https://blog.csdn.net/guoxiaorui666/article/details/99623023 https://lanjingling.github.io/2015/09/23/hexo%E7%AE%80%E4%BB%8B/","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[{"name":"HEXO","slug":"HEXO","permalink":"/tags/HEXO/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"Hexo搭建个人博客网站（原理篇）","slug":"Hexo搭建个人博客网站（原理篇）","date":"2020-05-20T15:14:57.000Z","updated":"2020-05-21T13:33:12.332Z","comments":true,"path":"2020/05/20/Hexo搭建个人博客网站（原理篇）/","link":"","permalink":"/2020/05/20/Hexo搭建个人博客网站（原理篇）/","excerpt":"","text":"前言学习HEXO的初衷是想建立一个博客网站，分享记录日常所学。参考了网上很多的资料，在安装、配置、开发的过程中补过坑，也接触了新的领域。挖掘新事物的过程就像从开始发现一粒沙到后来窥探到瀚海星辰一般有趣。在结合资料的基础上，将整个过程梳理记录一下。 首先需要阐明本文使用Windows环境配置。 Hexo这章我们主要来讲一下 Hexo 是怎样生成 HTML 的。 Hexo简介hexo是使用nodejs开发的一个快速、简洁、高效、开源的静态博客生成器。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。 为什么选择Hexo hexo非常小巧，使用nodejs开发，下载安装时只需要几个npm命令即可。 纯静态博客，不需要什么额外的mysql数据库、php环境…仅仅需要一个nodejs环境即可。 由于是静态博客，所以，可以非常方便部署到github、gitcafe上(后者是国内的，速度可能更有保证) 支持markdown语法、兼容windows linux mac，高可扩展性和自定义，而且有非常多的hexo主题… 工作原理hexo文件架构├── node_modules： #依赖包-安装插件及所需nodejs模块。 ├── public #最终网页信息。即存放被解析markdown、html文件。 ├── scaffolds #模板文件夹。即当您新建文章时，根据 scaffold生成文件。 ├── source #资源文件夹。即存放用户资源。 | └── _posts #博客文章目录。 └── themes #存放主题。Hexo根据主题生成静态页面。 ├── _config.yml #网站的配置信息。标题、网站名称等。 ├── db.json： #source解析所得到的缓存文件。 ├── package.json # 应用程序信息。即配置Hexo运行需要js包。 首先本地文件夹的source就是数据库，以.md（markdown）格式存储文章，theme文件夹是主题文件（决定页面模板）。 我们可以通过部署流程来逐步详尽分析。以下先来了解hexo有哪些部署命令，再分析部署的步骤流程 hexo命令总览hexo可以粗略分为三个子项目，分别是: hexo-cli hexo (下文中用hexo core来指代) hexo plugins hexo-cli：hexo命令行，作用是： 1.启动hexo命令进程和参数解析机制。每次我们输入hexo xxx命令后，都会通过node调用hexo-cli中的entry函数(比如，可以把’hexo init’视为’node hexo-cli/entry.js init’)，hexo init命令仅仅在安装时调用 2.实现hexo命令的三个初始参数：init/version/plugins 3.加载hexo核心模块，并初始化 hexo core：hexo核心，作用是：实现hexo的new、generate、publish等功能 hexo plugins: 指一些能够扩展hexo的插件。插件可以按功能分成两类: 1.扩展hexo命令的参数，如hexo-server(安装这个插件以后才能使用hexo server命令) 2.扩展hexo解析文件的”能力”，如增加jade模版解析功能的hexo-render-jade插件 介绍hexo主要命令： hexo n title #等价于 hexo new [layout] title 发布新文章 hexo p filename #等价于hexo publish filename 将_drafts下的文件放到_posts下，也就是发布草稿 hexo g #等价于hexo generate 生成静态网页 hexo s #等价于hexo server 启动预览服务器，开启-d选项时可以预览草稿 hexo d #等价于hexo deploy 发布到远程服务器，开启–generate选项可以在deploy前自动generate hexo s –debug #使用hexo s 启动本地服务后，如果修改了配置或者文章内容，需要停止服务后重新启动才能生效。这样，在调试或写文章阶段非常不方便，可以使用下面命令，以debug的方式启动，这样每次修改后就无需重启服务了。 部署的流程hexo g：生成静态文件。将我们的数据和界面模板相结合生成静态文件的过程。Hexo（node.js程序）遍历主题文件中你的source目录（js、css、img等静态资源），建立索引，再根据索引生成由html、js、css、img建立的纯静态文件并放在public文件夹里。public就是你的博客了，而这些恰好能被git pages识别。 hexo d：部署文件。主要是根据在_config.yml中配置的git仓库或者coding的地址，将public文件通过git方式push到上传到github或coding的指定分支，然后在根据pages服务呈现出页面。当然把public文件部署至你的服务器也是OK滴。 Hexo的模板引擎模板引擎的作用，就是将界面与数据分离。最简单的原理是将模板内容中指定的地方替换成数据，实现业务代码与逻辑代码分离 1.请看Hexo文件结构，source文件夹与themes文件夹是同级的，进而我们就可以将source文件夹理解为数据库，而主题文件夹相当于界面。hexo g就将我们的数据和界面相结合生成静态文件public 2.Hexo模板引擎默认使用ejs编写（本文以ejs模板举例，其他的有swig、jade）。hexo首先会解析.md文件，然后根据layout变量判断布局类型，再调用相应布局文件，这样每一块内容都是独立的，提供代码的复用性。最终生成一个html页面 3.布局模板文件位于layout文件夹下，以下将布局模板简称模板。layout文件结构在不同主题下文件排布不一，但整体框架是一样的，有： 公共模板。里面引入了head、footer等公共组件，在其他模板下会自动引入公共模板 首页模板 文章模板 分类模板 归档模板 …… 每个模板都默认使用layout布局，您可在文章的前置申明中指定其他布局，比如“post”或者“page”或是设为false来关闭布局功能（如果不填默认是post，这个在_config.yml中可以设置默认值），您甚至可在布局中再使用其他布局来建立嵌套布局 我们使用的模板。hexo new [layout] &lt;title&gt;就会使用对应的模板。 数据填充上面解释了界面的原理，此篇将分析数据及数据如何与界面结合。 数据的填充主要是 hexo -g 的时候将数据传递给 ejs 模板，然后再由 ejs 模板填充到 HTML 中。 配置文件中的数据Hexo 的配置文件 _config.yml 使用 yml语法 。例如博客的名字、副标题等等之类。这些数据项组织在 config 对象中。可以是数字、字符串、对象、数组。 如果要在模板中使用某个具体的值，比如字符串、数字、逻辑变量或者对象的某个成员，可以在主题的模板文件 ejs中直接使用： {% block title %} {{ page.title }} | {{ config.title }} {% endblock %} Github PagesHexo搭建的博客项目源码托管在github，并享受github pages服务。 GitHub pages简称pages服务，每个仓库都有一个pages服务，可用来展示项目，通过简单的设置项目的index.html，并以此做为入口供用户参观访问。大部分的 pages 服务都是用来搭建个人博客的。言外之意不仅能搭建博客，还能做些其他的事情~ 生成博客的页面有动、静态页面之分，著名的博客 wordpress ，既是动态页面生成的博客，其思路是 php + MySql 。 博客hexo生成的是静态页面，而Github pages 又支持静态页面的解析。因此二者一拍即合能够用来生成 html 拼合成博客。 参考文献：https://hexo.io/zh-cn/docs/github-pages https://juejin.im/post/598eeaff5188257d592e55bb#heading-5","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[{"name":"HEXO","slug":"HEXO","permalink":"/tags/HEXO/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"Hexo运营前记","slug":"Hexo运营前记","date":"2020-05-20T11:30:23.000Z","updated":"2020-05-20T11:19:52.510Z","comments":true,"path":"2020/05/20/Hexo运营前记/","link":"","permalink":"/2020/05/20/Hexo运营前记/","excerpt":"","text":"着手搭建博客是一件不在计划内的事情。起因是前段时间接触Linux的内容，讲到用SSH实现客户端到服务器端的免密登录时，有用一个hexo+github page搭建网站过程中的环节举例。虽然只是一句话带过的例子，在我尝试配置了本地SSH秘钥后，完全发现了一个新的探索方向（折腾方向）。 做博客就像打游戏，当你以为自己升到80级时，对于别人来说这仅仅处于20级的位置，层次浅到非常。 花在上面的时间前前后后有两周的晚上，开始照着官方文档来，实现基本配置。后面又浏览了下大佬们的博客，对比一下自己眼前毫无特色的主页不香了。于是推倒重建找主题，加美化插件。只能说一时折腾一时爽，永远折腾永远爽吧。 整个过程大致是换了两个主题，Icarus、Sakura。搭建用CDN加速连接的图库，熟悉hexo框架的基本命令，markdown的基本语法（没错，写博客更博客不像空间发状态那么直接），走了一遍git的工作流程，购买解析了域名。不停地倒腾配置文件，最主要的是找合适的优化插件。耗费这么多精力是我一开始没想到的。自己就像在海边捡起一枚贝壳，透过小小的贝壳看到大海的模样。下面是一开始Icarus的主题，其实还是挺好看的。作者最近用新的语言重新写了一套框架，因此想自己发挥的难度对我这种新手难度很大。 Icarus这款主题主打简洁大方，页面清爽。在上面增加了板娘的效果，评论打赏分类标签历程展示，基本都能实现，icarus也有缺点，无多级导航（仅仅是个人喜好）。后来浏览到sakura主题，也就是现在的主题。在简洁和酷炫之间还是选择了后者。模板用的人还不多，下载了主题star了下项目，感谢原作者的创作。下面是自己DIY的样式。 “工欲善其事必先利其器”，搭建的博客网站是记录自己历程的利器。也很是佩服自己这把年纪了还能这么折腾。 折腾被赋予了一个新的含义——走出舒适区。诚然，走出舒适区现在已然成许多人的口号，嘴上说说而已的口号，智商常常不在线的我更是如此。 漫长的道路，现在只是一个开始的起点。 A journey like life, welcome to my entire world!","categories":[{"name":"随想","slug":"随想","permalink":"/categories/随想/"}],"tags":[],"keywords":[{"name":"随想","slug":"随想","permalink":"/categories/随想/"}]},{"title":"画廊——日常","slug":"画廊","date":"2020-05-19T14:06:43.000Z","updated":"2020-05-21T06:14:52.200Z","comments":true,"path":"2020/05/19/画廊/","link":"","permalink":"/2020/05/19/画廊/","excerpt":"","text":"献给我琳~","categories":[],"tags":[{"name":"光影艺术","slug":"光影艺术","permalink":"/tags/光影艺术/"}],"keywords":[]},{"title":"SSM+Springboot商铺系统(一)","slug":"SSM-Springboot商铺系统","date":"2020-05-19T13:21:08.000Z","updated":"2020-05-19T13:31:48.298Z","comments":true,"path":"2020/05/19/SSM-Springboot商铺系统/","link":"","permalink":"/2020/05/19/SSM-Springboot商铺系统/","excerpt":"","text":"待更~","categories":[{"name":"项目","slug":"项目","permalink":"/categories/项目/"}],"tags":[],"keywords":[{"name":"项目","slug":"项目","permalink":"/categories/项目/"}]},{"title":"Linux核心技术与应用笔记（一）","slug":"Linux核心技术与应用笔记（一）","date":"2020-05-19T11:24:34.000Z","updated":"2020-05-19T11:42:58.713Z","comments":true,"path":"2020/05/19/Linux核心技术与应用笔记（一）/","link":"","permalink":"/2020/05/19/Linux核心技术与应用笔记（一）/","excerpt":"","text":"待更~~~~","categories":[{"name":"笔记","slug":"笔记","permalink":"/categories/笔记/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"/tags/Linux/"}],"keywords":[{"name":"笔记","slug":"笔记","permalink":"/categories/笔记/"}]},{"title":"Sakura主题配置总结","slug":"Hexo-Theme-Sakura","date":"2020-05-19T02:45:01.000Z","updated":"2020-05-20T15:44:32.309Z","comments":true,"path":"2020/05/19/Hexo-Theme-Sakura/","link":"","permalink":"/2020/05/19/Hexo-Theme-Sakura/","excerpt":"","text":"前言搭建完框架后，为博客找一个主题。主题的搭建往往是无止境的，适合爱折腾的选手。在网上被迫欣赏大佬们的华丽主题后，我看着自己一开始配置的主题，突然觉得不香了。是时候换一拨了，挑选了一个用的人比较少的sakura主题，在github上star了项目，感谢原作者的辛勤创作。 一： 主题下载hexo-theme-sakura建议下载压缩包格式，因为除了主题内容还有些source的配置对新手来说比较太麻烦，直接下载解压就省去这些麻烦咯。 下载好后解压到博客根目录（不是主题目录哦，重复的选择替换）。接着在命令行（cmd、bash）运行npm i安装依赖。 二： 主题配置博客根目录下的_config配置站点（显示在浏览器导航页的信息） # Site title: 你的站点名 subtitle: description: 站点简介 keywords: author: 作者名 language: zh-cn timezone: 部署 deploy: type: git repo: github: 你的github仓库地址 # coding: 你的coding仓库地址 branch: master 备份 （使用hexo b发布备份到远程仓库） backup: type: git message: backup my blog of https://sunshine98yy.github.io/ repository: # 你的github仓库地址,备份分支名 （建议新建backup分支） github: https://github.com/sunshine98yy/sunshine98yy.github.io.git,backup # coding: https://git.coding.net/sunshine98yy/sunshine98yy.git,backup 顶部站点名字其中标明【改】的是需要修改部门，标明【选】是可改可不改，标明【非】是不用改的部分 # site name # 站点名 【改】 prefixName: さくら荘その siteName: YU YU 顶部导航栏# 站点菜单配置 【选】 menus: 首页: { path: /, fa: fa-fort-awesome faa-shake } 归档: { path: /archives, fa: fa-archive faa-shake, submenus: { 技术: {path: /categories/技术/, fa: fa-code }, 生活: {path: /categories/生活/, fa: fa-file-text-o }, 资源: {path: /categories/资源/, fa: fa-cloud-download }, 随想: {path: /categories/随想/, fa: fa-commenting-o }, 转载: {path: /categories/转载/, fa: fa-book } } } 清单: { path: javascript:;, fa: fa-list-ul faa-vertical, submenus: { 书单: {path: /tags/悦读/, fa: fa-th-list faa-bounce }, 番组: {path: /bangumi/, fa: fa-film faa-vertical }, 歌单: {path: /music/, fa: fa-headphones }, 图集: {path: /tags/图集/, fa: fa-photo } } } 留言板: { path: /comment/, fa: fa-pencil-square-o faa-tada } 友人帐: { path: /links/, fa: fa-link faa-shake } 赞赏: { path: /donate/, fa: fa-heart faa-pulse } 关于: { path: /, fa: fa-leaf faa-wrench , submenus: { 我？: {path: /about/, fa: fa-meetup}, 主题: {path: /theme-sakura/, fa: iconfont icon-sakura }, Lab: {path: /lab/, fa: fa-cogs }, } } 客户端: { path: /client/, fa: fa-android faa-vertical } RSS: { path: /atom.xml, fa: fa-rss faa-pulse } 前面的path是网页路径，这个不建议修改，但可以修改。后面的如: fa: fas fa-home fa-1x 这个就是对应的图标设置,关于这个图标大家可以去fontawesome看教程以及选择自己喜欢的图标，导航栏下拉下拉菜单的图标修改和导航栏相同。 头像修改# favicon and site master avatar # 站点的favicon和头像 输入图片路径【改】 favicon: /images/favicon.ico avatar: /img/custom/avatar.jpg 我这个是使用cdn后的路径，也可以修改为： favicon: https://cdn.jsdelivr.net/gh/sunshine98yy/mycdn/img/custom/avatar.jpg 大家可以用jsDeliver+github搭建自己的cdn,具体教程请点击查看我的另一篇博客其中有详细介绍！ # 站点url 【改】 url: https://sakura.hojun.cn # 站点介绍（或者说是个人签名）【改】 description: Live your life with passion! With some drive! # 站点cdn，没有就为空 【改】 若是cdn为空，一些图片地址就要填完整地址了，比如之前avatar就要填https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/custom/avatar.jpg cdn: https://cdn.jsdelivr.net/gh/honjun/cdn@1.6 # 开启pjax 【选】 pjax: 1 # 站点首页的公告信息 【改】 notice: hexo-Sakura主题已经开源，目前正在开发中... # 懒加载的加载中图片 【选】 lazyloadImg: https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/loader/orange.progress-bar-stripe-loader.svg # Home page sort type: -1: newer first，1: older first. 【非】 homePageSortType: -1 # Home page article shown number) 【非】 homeArticleShown: 10 # 背景图片 【选】 bgn: 8 # startdash面板 url, title, desc img 【改】 startdash: - {url: /theme-sakura/, title: Sakura, desc: 本站 hexo 主题, img: /img/startdash/sakura.md.png} - {url: http://space.bilibili.com/271849279, title: Bilibili, desc: 博主的b站视频, img: /img/startdash/bilibili.jpg} - {url: /, title: hojun的万事屋, desc: 技术服务, img: /img/startdash/wangshiwu.jpg} # your site build time or founded date # 你的站点建立日期 【改】 siteBuildingTime: 07/17/2018 # 社交按钮(social) url, img PC端配置 【改】 social: github: {url: http://github.com/honjun, img: /img/social/github.png} sina: {url: http://weibo.com/mashirozx?is_all=1, img: /img/social/sina.png} wangyiyun: {url: http://weibo.com/mashirozx?is_all=1, img: /img/social/wangyiyun.png} zhihu: {url: http://weibo.com/mashirozx?is_all=1, img: /img/social/zhihu.png} email: {url: http://weibo.com/mashirozx?is_all=1, img: /img/social/email.svg} wechat: {url: /#, qrcode: /img/custom/wechat.jpg, img: /img/social/wechat.png} # 社交按钮(msocial) url, img 移动端配置 【改】 msocial: github: {url: http://github.com/honjun, fa: fa-github, color: 333} weibo: {url: http://weibo.com/mashirozx?is_all=1, fa: fa-weibo, color: dd4b39} qq: {url: https://wpa.qq.com/msgrd?v=3&amp;uin=954655431&amp;site=qq&amp;menu=yes, fa: fa-qq, color: 25c6fe} # 赞赏二维码（其中wechatSQ是赞赏单页面的赞赏码图片）【改】 donate: alipay: /img/custom/donate/AliPayQR.jpg wechat: /img/custom/donate/WeChanQR.jpg wechatSQ: /img/custom/donate/WeChanSQ.jpg # 首页视频地址为https://cdn.jsdelivr.net/gh/honjun/hojun@1.2/Unbroken.mp4，配置如下 【改】 movies: url: https://cdn.jsdelivr.net/gh/honjun/hojun@1.2 # 多个视频用逗号隔开，随机获取。支持的格式目前已知MP4,Flv。其他的可以试下，不保证有用 name: Unbroken.mp4 # 左下角aplayer播放器配置 主要改id和server这两项，修改详见[aplayer文档] 【改】 aplayer: id: 2660651585 server: netease type: playlist fixed: true mini: false autoplay: false loop: all order: random preload: auto volume: 0.7 mutex: true # Valine评论配置【改】 valine: true v_appId: GyC3NzMvd0hT9Yyd2hYIC0MN-gzGzoHsz v_appKey: mgOpfzbkHYqU92CV4IDlAUHQ 分类页和标签页配置分类页 标签页 配置项在\\themes\\Sakura\\languages\\zh-cn.yml里。新增一个分类或标签最好加下哦，当然嫌麻烦可以直接使用一张默认图片（可以改主题或者直接把404图片替换下，征求下意见要不要给这个在配置文件中加个开关，可以issue或群里提出来），现在是没设置的话会使用那种倒立小狗404哦。 #category # 按分类名创建 技术: #中文标题 zh: 野生技术协会 # 英文标题 en: Geek – Only for Love # 封面图片 img: https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/banner/coding.jpg 生活: zh: 生活 en: live img: https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/banner/writing.jpg #tag # 标签名即是标题 悦读: # 封面图片 img: https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/banner/reading.jpg 单页面封面配置如留言板页面页面，位于source下的comment下，打开index.md如下： --- title: comment date: 2018-12-20 23:13:48 keywords: 留言板 description: comments: true # 在这里配置单页面头部图片，自定义替换哦~ photos: https://cdn.jsdelivr.net/gh/honjun/cdn@1.4/img/banner/comment.jpg --- 单页面配置番组计划页 （请直接在下载后的文件中改，下面的添加了注释可能会有些影响） --- layout: bangumi title: bangumi comments: false date: 2019-02-10 21:32:48 keywords: description: bangumis: # 番组图片 - img: https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg # 番组名 title: 朝花夕誓——于离别之朝束起约定之花 # 追番状态 （追番ing/已追完） status: 已追完 # 追番进度 progress: 100 # 番剧日文名称 jp: さよならの朝に約束の花をかざろう # 放送时间 time: 放送时间: 2018-02-24 SUN. # 番剧介绍 desc: 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。 - img: https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg title: 朝花夕誓——于离别之朝束起约定之花 status: 已追完 progress: 50 jp: さよならの朝に約束の花をかざろう time: 放送时间: 2018-02-24 SUN. desc: 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。 --- 友链页 （请直接在下载后的文件中改，下面的添加了注释可能会有些影响） --- layout: links title: links # 创建日期，可以改下 date: 2018-12-19 23:11:06 # 图片上的标题，自定义修改 keywords: 友人帐 description: # true/false 开启/关闭评论 comments: true # 页面头部图片，自定义修改 photos: https://cdn.jsdelivr.net/gh/honjun/cdn@1.4/img/banner/links.jpg # 友链配置 links: # 类型分组 - group: 个人项目 # 类型简介 desc: 充分说明这家伙是条咸鱼 &lt; (￣︶￣)&gt; items: # 友链链接 - url: https://shino.cc/fgvf # 友链头像 img: https://cloud.moezx.cc/Picture/svg/landscape/fields.svg # 友链站点名 name: Google # 友链介绍 下面雷同 desc: Google 镜像 - url: https://shino.cc/fgvf img: https://cloud.moezx.cc/Picture/svg/landscape/fields.svg name: Google desc: Google 镜像 # 类型分组... - group: 小伙伴们 desc: 欢迎交换友链 ꉂ(ˊᗜˋ) items: - url: https://shino.cc/fgvf img: https://cloud.moezx.cc/Picture/svg/landscape/fields.svg name: Google desc: Google 镜像 - url: https://shino.cc/fgvf img: https://cloud.moezx.cc/Picture/svg/landscape/fields.svg name: Google desc: Google 镜像 --- 写文章配置主题集成了个人插件hexo-tag-bili和hexo-tag-fancybox_img。其中hexo-tag-bili用来在文章或单页面中插入B站外链视频，使用语法如下： {% bili video_id [page] %} 详细使用教程详见hexo-tag-bili。 hexo-tag-fancybox_img用来在文章或单页面中图片，使用语法如下： {% fb_img src [caption] %} 详细使用教程详见hexo-tag-fancybox_img","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[{"name":"HEXO","slug":"HEXO","permalink":"/tags/HEXO/"},{"name":"sakura","slug":"sakura","permalink":"/tags/sakura/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]}]}